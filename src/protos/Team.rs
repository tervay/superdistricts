// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `Team.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Team {
    // message fields
    pub key: ::protobuf::Chars,
    pub name: ::protobuf::Chars,
    pub city: ::protobuf::Chars,
    pub state: ::protobuf::Chars,
    pub country: ::protobuf::Chars,
    pub postal_code: ::protobuf::Chars,
    pub latitude: f32,
    pub longitude: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Team {
    fn default() -> &'a Team {
        <Team as ::protobuf::Message>::default_instance()
    }
}

impl Team {
    pub fn new() -> Team {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        ::protobuf::Clear::clear(&mut self.key);
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::protobuf::Chars) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::protobuf::Chars {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.key, ::protobuf::Chars::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::protobuf::Chars) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.name, ::protobuf::Chars::new())
    }

    // string city = 3;


    pub fn get_city(&self) -> &str {
        &self.city
    }
    pub fn clear_city(&mut self) {
        ::protobuf::Clear::clear(&mut self.city);
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::protobuf::Chars) {
        self.city = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::protobuf::Chars {
        &mut self.city
    }

    // Take field
    pub fn take_city(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.city, ::protobuf::Chars::new())
    }

    // string state = 4;


    pub fn get_state(&self) -> &str {
        &self.state
    }
    pub fn clear_state(&mut self) {
        ::protobuf::Clear::clear(&mut self.state);
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::protobuf::Chars) {
        self.state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::protobuf::Chars {
        &mut self.state
    }

    // Take field
    pub fn take_state(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.state, ::protobuf::Chars::new())
    }

    // string country = 5;


    pub fn get_country(&self) -> &str {
        &self.country
    }
    pub fn clear_country(&mut self) {
        ::protobuf::Clear::clear(&mut self.country);
    }

    // Param is passed by value, moved
    pub fn set_country(&mut self, v: ::protobuf::Chars) {
        self.country = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_country(&mut self) -> &mut ::protobuf::Chars {
        &mut self.country
    }

    // Take field
    pub fn take_country(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.country, ::protobuf::Chars::new())
    }

    // string postal_code = 6;


    pub fn get_postal_code(&self) -> &str {
        &self.postal_code
    }
    pub fn clear_postal_code(&mut self) {
        ::protobuf::Clear::clear(&mut self.postal_code);
    }

    // Param is passed by value, moved
    pub fn set_postal_code(&mut self, v: ::protobuf::Chars) {
        self.postal_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_postal_code(&mut self) -> &mut ::protobuf::Chars {
        &mut self.postal_code
    }

    // Take field
    pub fn take_postal_code(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.postal_code, ::protobuf::Chars::new())
    }

    // float latitude = 7;


    pub fn get_latitude(&self) -> f32 {
        self.latitude
    }
    pub fn clear_latitude(&mut self) {
        self.latitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f32) {
        self.latitude = v;
    }

    // float longitude = 8;


    pub fn get_longitude(&self) -> f32 {
        self.longitude
    }
    pub fn clear_longitude(&mut self) {
        self.longitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f32) {
        self.longitude = v;
    }
}

impl ::protobuf::Message for Team {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.city)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.state)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.country)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.postal_code)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.latitude = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.longitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.city.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.city);
        }
        if !self.state.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.state);
        }
        if !self.country.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.country);
        }
        if !self.postal_code.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.postal_code);
        }
        if self.latitude != 0. {
            my_size += 5;
        }
        if self.longitude != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.city.is_empty() {
            os.write_string(3, &self.city)?;
        }
        if !self.state.is_empty() {
            os.write_string(4, &self.state)?;
        }
        if !self.country.is_empty() {
            os.write_string(5, &self.country)?;
        }
        if !self.postal_code.is_empty() {
            os.write_string(6, &self.postal_code)?;
        }
        if self.latitude != 0. {
            os.write_float(7, self.latitude)?;
        }
        if self.longitude != 0. {
            os.write_float(8, self.longitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Team {
        Team::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "key",
                |m: &Team| { &m.key },
                |m: &mut Team| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "name",
                |m: &Team| { &m.name },
                |m: &mut Team| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "city",
                |m: &Team| { &m.city },
                |m: &mut Team| { &mut m.city },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "state",
                |m: &Team| { &m.state },
                |m: &mut Team| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "country",
                |m: &Team| { &m.country },
                |m: &mut Team| { &mut m.country },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                "postal_code",
                |m: &Team| { &m.postal_code },
                |m: &mut Team| { &mut m.postal_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "latitude",
                |m: &Team| { &m.latitude },
                |m: &mut Team| { &mut m.latitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "longitude",
                |m: &Team| { &m.longitude },
                |m: &mut Team| { &mut m.longitude },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Team>(
                "Team",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Team {
        static instance: ::protobuf::rt::LazyV2<Team> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Team::new)
    }
}

impl ::protobuf::Clear for Team {
    fn clear(&mut self) {
        ::protobuf::Clear::clear(&mut self.key);
        ::protobuf::Clear::clear(&mut self.name);
        ::protobuf::Clear::clear(&mut self.city);
        ::protobuf::Clear::clear(&mut self.state);
        ::protobuf::Clear::clear(&mut self.country);
        ::protobuf::Clear::clear(&mut self.postal_code);
        self.latitude = 0.;
        self.longitude = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Team {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Team {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nTeam.proto\"\xdd\x01\n\x04Team\x12\x12\n\x03key\x18\x01\x20\x01(\tR\
    \x03keyB\0\x12\x14\n\x04name\x18\x02\x20\x01(\tR\x04nameB\0\x12\x14\n\
    \x04city\x18\x03\x20\x01(\tR\x04cityB\0\x12\x16\n\x05state\x18\x04\x20\
    \x01(\tR\x05stateB\0\x12\x1a\n\x07country\x18\x05\x20\x01(\tR\x07country\
    B\0\x12!\n\x0bpostal_code\x18\x06\x20\x01(\tR\npostalCodeB\0\x12\x1c\n\
    \x08latitude\x18\x07\x20\x01(\x02R\x08latitudeB\0\x12\x1e\n\tlongitude\
    \x18\x08\x20\x01(\x02R\tlongitudeB\0:\0B\x08\x98\xa7\x08\x01\xa0\xa7\x08\
    \x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
